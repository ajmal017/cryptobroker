#!/usr/bin/env ruby

require 'cryptobroker'
require 'pry'

app = Cryptobroker.new('../dev-config.yml')

market, trades = app.trades([1])[0]

timeframe = 15*60
chart = Cryptobroker::Chart::Simple.new(trades.first.timestamp, timeframe)
trades.each { |t| chart.append(t.timestamp, t.price, t.amount) }
chart.finish

res = (trades.last.timestamp - trades.first.timestamp) / timeframe.to_f

puts "market: #{market.couple}"
puts "period: #{trades.first.timestamp} - #{trades.last.timestamp}"
puts "coverage: #{chart.size * 100 / res} %"

require 'cryptobroker/indicator/filtered_macd'
require 'cryptobroker/indicator/macd'
require 'cryptobroker/indicator/dema'
require 'cryptobroker/broker/backtesting/transaction_fee'
require 'cryptobroker/broker/backtesting/relative'

start_amount = 100.to_d
bars = chart.to_a

tests = [
    [:base, '0.002', Cryptobroker::Indicator::FilteredMACD.new],
    [:quote, '0.002', Cryptobroker::Indicator::FilteredMACD.new],
    [:base, '0.01', Cryptobroker::Indicator::FilteredMACD.new],
    [:base, '0.002', Cryptobroker::Indicator::MACD.new],
    [:quote, '0.002', Cryptobroker::Indicator::DEMA.new],
]
tests.each do |btype, fee, indicator|
  pos_diff = fee.to_d
  pos_diff = pos_diff - (pos_diff/(1+pos_diff))

  # indicator = (bars.size / 20 - 1).times.map {|i| (i+1)*20}
  # indicator.unshift(0)
  # indicator.push(bars.size - 3)
  # indicator.push(bars.size - 2)
  # indicator.push(bars.size - 1)
  #
  # indicator = bars.size.times.to_a
  #
  # indicator = indicator.zip([:buy, :sell].cycle)

  transaction_fee = Cryptobroker::Broker::Backtesting::TransactionFee.new(btype, :median, start_amount, fee)
  relative = Cryptobroker::Broker::Backtesting::Relative.new(btype, :median, fee)
  transaction_fee.reset(bars)
  relative.reset(bars)
  signals = 0

  indicator.append(bars) do |type, ts, params|
    next unless params[:idx] + 1 < bars.size
    transaction_fee.public_send(type, params[:idx]+1)
    relative.public_send(type, params[:idx]+1)
    signals += 1
  end
  puts "\nindicator: #{indicator.name}  signals: #{signals}"

  # indicator.each do |idx, type|
  #   transaction_fee.public_send(type, idx)
  #   relative.public_send(type, idx)
  #   signals += 1
  # end
  # puts "\nsignals: #{signals}"

  puts 'trs_fee: %.100f' % transaction_fee.result[0]

  amount = start_amount
  relative.result.each do |change|
    next if change == 0
    amount *= 1 + change
  end
  puts 'relativ: %.100f' % amount

  puts 'differe: %e' % (transaction_fee.result[0]-amount).abs
  puts 'posdiff: %e' % (amount * pos_diff)
end