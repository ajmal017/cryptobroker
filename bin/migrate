#!/usr/bin/env ruby

require 'cryptobroker'

class Migrate < Cryptobroker

  attr_reader :migrations

  def initialize(config = '../config.yml')
    super config
    @migrations = Dir.glob('../db/migrate/*.rb').sort
    @migrations.each { |m| require m }
    @migrations = @migrations
                      .map { |m| File.basename m, '.rb' }
                      .select { |m| m =~ /\A[0-9]{14}_.+\z/ }
                      .map { |m| m.sub(/\A[0-9]{14}_/, '').camelize.constantize }
  end

  def up
    @migrations.each { |m| m.migrate(:up) }
  end

  def down
    @migrations.reverse_each { |m| m.migrate(:down) }
  end

  def init_data
    currencies_array = Currency.create([
                        {code: 'BTC', name: 'Bitcoin', crypto: true},
                        {code: 'GHS', name: 'Gigahash', crypto: true},
                        {code: 'LTC', name: 'Litecoin', crypto: true},
                        {code: 'NMC', name: 'Namecoin', crypto: true},
                        {code: 'USD', name: 'United States dollar', crypto: false},
                        {code: 'EUR', name: 'Euro', crypto: false},
                        {code: 'PLN', name: 'Polish zloty', crypto: false}
                    ])
    currencies = {}
    currencies_array.each { |currency| currencies[currency.code] = currency }
    cex = Exchange.create({name: 'cex.io', api: 'cexio'})
    market = ->(curr1, curr2) { {exchange: cex, base: currencies[curr1], quote: currencies[curr2], traced: true} }
    Market.create([
                      market['BTC', 'USD'],
                      market['GHS', 'USD'],
                      market['LTC', 'USD'],
                      market['BTC', 'EUR'],
                      market['LTC', 'EUR'],
                      market['GHS', 'BTC'],
                      market['LTC', 'BTC'],
                      market['NMC', 'BTC'],
                      market['GHS', 'LTC'],
                      market['GHS', 'BTC'],
                  ])
  end
end

migrate = Migrate.new
migrate.down
migrate.up
migrate.init_data
